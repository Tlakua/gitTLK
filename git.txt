Todo repositorio seria un repositorio siempre y cuando contenga una carpeta llamada ".git"

############################### Estados Principales de GIT
1- Espacio de trabajo -> es la carpeta y el arbol que la sucede que esta marcada como repositorio, la carpeta .git no forma parte del espacio de trabajo.
2- Area de preparacion -> el area de preparacion es cuando andes de confirmar un commit le agregamos los archivos con "git add".
3- Repositorio confirmado -> cuando se confirma un commit "git vommit" pasa del area de preparacion al repositorio.

############################### Coflictos en Git
Cuando git manda un conflicto hay que ir al editor de texto en el que estamos trabajando (siempre y cuando el editor tenga soporte git)
Una vez ahi tenemos que solucinar manualmente los conflictos borrando y dejando lo deseado.

############################### Git ignore
el archivo ".gitignore" es una lista de archivos o carpetas que no queremos que sean registrados en el repositorio.
esto quiere decir que los archivos en el gitignore no formaran parte del espacio de trabajo de nuestro repositorio.
el archivo .gitignore se crea manualmente.
se debe hacer commit del archivo ignore ya que éste si formara parte del repositorio.
si dentro del gitignore se escribe "./CISCO" -> la carpeta llamada CISCO no se tomaria en cuenta para el repositorio.

############################### LLave SSH
En linux el comando desde la terminal para generar una llave de 4096 bits es, ya que por defecto la crea de 2048:
* ssh-keygen -t rsa -b 4096
se puede agregar -C para especificar la llave a una cuenta:
* ssh-keygen -t rsa -b 4096 -C -> Especifica la información del campo de comentario en el archivo de la clave. Utilice comillas si la cadena contiene espacios. Si no especifica un comentario cuando crea una clave, se crea un comentario predeterminado que incluye el tipo, el creador, la fecha y la hora de la clave.
Nos dira un directorio de nuestro PC en el que se creara la clave, podemos dejarlo o modificarlo.
se crea la llave publica y privada, para vincular el envio de datos entre nuestra PC y el servidor remoto en el que se encuentra nuestro repositorio, debemos copiar toda la llave PUBLICA a nuestra plataforma creando una llave SSH en la misma.

############################### GIT CONFIG
git config --global -> "global" (a todos los epositorios en un pc)
git config --local -> "local" (a un repositorio)
git config --global user.email "email" -> "email" sera el email que le dara a los commits hehos.
[git config --global user.name] "name" -> "name" sera el nombre que le dara a los commits hehos.
   ^          ^      ^    ^ 
 COMANDO    TIPO  sector  configuracion-del-sector
 git config -l -> muestra la lista de las configuraciones de git

 ############################### GIT INIT
 git init -> iniciamos un nuevo repositorio

 ############################### GIT CLONE
 git clone -> clona (copia) un repositorio existente

 ############################### GIT STATUS
 git status -> muestra los cabios qu se pueden agreagar a un commit.

 ############################### GIT ADD
 git add "archivo" -> "archivo" agrega el cambio, insercio o eliminacion de cada cambio en el espacio de trabajo.
 git add . -> agrega todos los archivos de la carpeta dentro de la que estamos parados en la terminal.

 ############################### GIT COMMIT 
 git commit -> confirma un commit para quedar guardado en el repositorio. Mana a un editor de texto en el que pide el msg del commit.(no se permite un commit sin msg)
 git commit -m "msg" -> "msg" sera el mensaje del commit, confirma el commit directamente
 git commit -am "msg" -> sin necesidad de "git add" hace el commit de un solo paso para los archivos MODIFICADOS¡. 

 ############################### GIT LOG
 git log -> muestra los commit realizados en el repositorio con informacion basica de cada uno. (salir con Q)
 git log --oneline -> muestra en una sola linea los commit realizados con un hash resumido y el msj del commit.
 git log --oneline -n "num" -> muestra un "git log --oneline" con la cantidad de "num" de commit.
 git log --raw -> muestra los commits pero agrega la informacion de los archivos que se modificaron agreagaron o borraron en cada uno.
 git log --oneline --all -> muestra todos los commits de todas las ramas. 
 ***git log --oneline-- graph --decorate -> muestra en forma de arbol los commits y sus ramas.

############################### GIT CHECKOUT
git checkout "archivo" -> devuelve el "archivo" al estado de su ultimo commit en el repositorio
git checkout -f -> forza a que el espacio de trabajo completo regrese al ultimo commit realizado.
git checkout "IDcommit" -> sirve para regresar el espacio de trabajo al commit con el hash: "IDcommit" de nuestra repositorio.
git checkout master -> regresa el espacio de trabajo al ultimo commit realizado. El que esta en el master
git checkout "branch" -> nos mueve entre ramas del repositorio.
git checkout -b "branch" -> crea una nueva rama en el repositorio con el nombre: "name"

############################### GIT MERGE
git merge "branch" -> mescla la rama "branch" con la rama en la que estamos parados.
git merge --abort -> aborta la fusion de dos ramas despues de encontrar conflictos.

############################### GIT BRANCH
git branch -> enlista las ramas del repositorio.
git branch -D "branch" -> elimina la rama "branch".

Para crear una rama remota debemos crearla local normalmente y despues:
1.- con checkout pasarnos a la nueva rama.
2.- subir cambios al repo remoto con push, pero con un origin diferente a master, el comando seria: 
* git push origin "branch" -> donde branch es el nombre de la nueva rama.

############################### GIT PUSH
git push origin master -> sube todos commits locales al repo remoto, marcando como origen el master remoto.
git push -> subir cambios al repo remoto

############################### GIT PULL
git pull -> baja cambios del repo remoto

############################### GIT FETCH
git fech -> descarga la informacion del repositorio hacia nuestra PC, por ejemplo al hacer git log para mostrar toda la info.

############################### GIT REMOTE
git remote -v -> nos muestra lo que se puede hacer con respecto al repositorio remoto, baja, subir descargar informacion.

############################### GIT RESTORE
git restore --stage "archivo" -> saca del area de preparacion el "archivo" seleccionado.

############################### GIT DIFF
git diff "archivo" -> muestra la diferencia que hay entre el "archivo" guardado en el repositorio y el que tengo en el espacio de trabajo.
git diff --stat "archivo" -> muestra una estadistica de lo que se ha hecho en el "archivo"